{
  "name": "fastareader",
  "main": "lib/FASTAReader.js",
  "version": "0.2.0",
  "bin": {
    "fastareader": "bin/fastareader"
  },
  "dependencies": {
    "dna": ">=0.1.5",
    "argparser": ">=0.2.0"
  },
  "devDependencies": {
    "termcolor": "*"
  },
  "engines": {
    "node": ">=0.6.1"
  },
  "author": {
    "name": "SHIN Suzuki",
    "email": "shinout310@gmail.com"
  },
  "description": "FASTA DNA/RNA sequence reader",
  "keywords": [
    "DNA",
    "FASTA",
    "RNA",
    "sequence",
    "bioinformatics"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/shinout/FASTAReader.git"
  },
  "bugs": {
    "url": "https://github.com/shinout/FASTAReader/issues"
  },
  "licences": [
    {
      "type": "MIT",
      "url": "https://github.com/shinout/FASTAReader/raw/master/LICENCE"
    }
  ],
  "readme": "FASTAReader\n============\n\ndescription\n-----------\nReads FASTA format and fetches sequences. (Node.js)\n\ninstallation\n------------\n    $ npm install fastareader\n\nIf you haven't installed [Node.js](http://nodejs.org/) yet,\n\nfirst install [nvm](https://github.com/creationix/nvm) and follow the instruction on that page.\n\n## preparation ##\n### Create FASTA Information JSON file ###\n\nFASTAReader first scans through the given FASTA file.\n\nIt costs nearly one minites.\n\nTo skip this process, FASTAReader generates JSON of the scanned information.\n\nYou can save the JSON like\n\n    $ fastareader foobar.fasta > foobar.fasta.json\n\nAfter generating JSON, the file is automatically read if the prefix equals to the original FASTA file and\nsuffix equals .json. \n\n\n## command-line ##\n\n    $ fastareader <fasta file> <rname> <pos> <length> \n\nThen, sequence data comes to stdout.\n    \n    AATGATCTATAGTCCATTAATTCAGTTACT\n\n### args ###\n\n<table>\n<tr><th>name</th>\n<td>description</td>\n<td>example</td></tr>\n\n<tr><th>fasta file</th>\n<td>a fasta file to get sequences</td>\n<td>hg19.fa</td></tr>\n\n<tr><th>rname</th>\n<td>a reference name to fetch. Must be in the fasta file.</td>\n<td>chr12</td></tr>\n\n<tr><th>pos</th>\n<td>start position of the sequence to fetch (1-based coordinate).</td>\n<td>51417222</td></tr>\n\n<tr><th>length</th>\n<td>length of the sequence to fetch.</td>\n<td>300</td></tr>\n</table>\n\n### options ###\n\n<table>\n<tr><th>name</th>\n<td>description</td>\n<td>example</td></tr>\n\n<tr><th>--compl, -c</th>\n<td>Gets complmentary strand of the sequence</td>\n<td>-c</td></tr>\n\n<tr><th>--json, -j</th>\n<td>a FASTA Information JSON file. When the name is [fasta file].json, the file is automatically read.</td>\n<td>--json hg19.fa.json</td></tr>\n</table>\n\n\n## JavaScript API Documentation ##\n\n- FASTAReader.create(fastafile, jsonfile)\n- reader.fetch(id, start, length, inverse)\n- reader.fetchByFormat(format)\n- reader.getEndPos(rname)\n- reader.hasN(rname, start, length)\n\n### FASTAReader.create(fastafile, jsonfile) ###\nCreates an instance of FASTAReader.\n\n- **fastafile** is a fasta file to get sequence from.\n- **jsonfile** is optional, a FASTA Information JSON file.\n\nReturns an instance of FASTAReader.\n\n### reader.fetch(rname, start, length, inverse) ###\n\n- **rname** is the reference name.\n- **start** is the start position of the sequence to fetch.\n- **length** is the length of the sequence to fetch.\n- if **inverse** is true, complementary strand is fetched.\n\nHere is an example.\n\n    var reader = require('fastareader').create('/path/to/fasta.fasta');\n\n    var rname  = 'chr11';\n    var start  = 36181240;\n    var length = 420;\n    var rev    = true;\n\n    var seq = reader.fetch(rname, start, length, rev);\n\n### reader.fetchByFormat(format) ###\n\n**format** is compatible with [dna library](https://github.com/shinout/dna)\n\nan example of the format\n\n    chr2:34100214-34101989,-\n\nNote that this format is **0-based coordinate.**\n\n### reader.getEndPos(rname) ###\n\nGets the last position of **rname**.\n\nIt is the same as the length of the reference.\n\n### reader.hasN(rname, start, length) ###\n\nReturns true if the region contains N, otherwise returns false.\nThe region is specified by **rname**, **start** and **length**.\nThese are the same meaning as **reader.fetch()**.\n\n\nNOTICE\n------\n\nFASTAReader uses 1-based coordinate system.\n\n> [1-based coordinate system]\n\n> A coordinate system where the first base of a sequence is one.\n> In this coordinate system, a region is specified by a closed interval.\n> For example, the region between 3rd and 7th bases inclusive is [3, 7].\n> The SAM, GFF and Wiggle formats are using the 1-based coordinate system.\n\n> (from http://samtools.sourceforge.net/SAM1.pdf)\n\n",
  "_id": "fastareader@0.2.0",
  "dist": {
    "shasum": "8cb3d040e83a0a5b9a5dd8eb5058030c72c0f335"
  },
  "_from": "fastareader@0.2.0"
}
